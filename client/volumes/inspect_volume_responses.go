// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InspectVolumeReader is a Reader for the InspectVolume structure.
type InspectVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InspectVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInspectVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewInspectVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewInspectVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewInspectVolumeOK creates a InspectVolumeOK with default headers values
func NewInspectVolumeOK() *InspectVolumeOK {
	return &InspectVolumeOK{}
}

/*InspectVolumeOK handles this case with default header values.

Volume create response
*/
type InspectVolumeOK struct {
	Payload *InspectVolumeOKBody
}

func (o *InspectVolumeOK) Error() string {
	return fmt.Sprintf("[GET /libpod/volumes/{name}/json][%d] inspectVolumeOK  %+v", 200, o.Payload)
}

func (o *InspectVolumeOK) GetPayload() *InspectVolumeOKBody {
	return o.Payload
}

func (o *InspectVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InspectVolumeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInspectVolumeNotFound creates a InspectVolumeNotFound with default headers values
func NewInspectVolumeNotFound() *InspectVolumeNotFound {
	return &InspectVolumeNotFound{}
}

/*InspectVolumeNotFound handles this case with default header values.

No such volume
*/
type InspectVolumeNotFound struct {
	Payload *InspectVolumeNotFoundBody
}

func (o *InspectVolumeNotFound) Error() string {
	return fmt.Sprintf("[GET /libpod/volumes/{name}/json][%d] inspectVolumeNotFound  %+v", 404, o.Payload)
}

func (o *InspectVolumeNotFound) GetPayload() *InspectVolumeNotFoundBody {
	return o.Payload
}

func (o *InspectVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InspectVolumeNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInspectVolumeInternalServerError creates a InspectVolumeInternalServerError with default headers values
func NewInspectVolumeInternalServerError() *InspectVolumeInternalServerError {
	return &InspectVolumeInternalServerError{}
}

/*InspectVolumeInternalServerError handles this case with default header values.

Internal server error
*/
type InspectVolumeInternalServerError struct {
	Payload *InspectVolumeInternalServerErrorBody
}

func (o *InspectVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /libpod/volumes/{name}/json][%d] inspectVolumeInternalServerError  %+v", 500, o.Payload)
}

func (o *InspectVolumeInternalServerError) GetPayload() *InspectVolumeInternalServerErrorBody {
	return o.Payload
}

func (o *InspectVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InspectVolumeInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*InspectVolumeInternalServerErrorBody inspect volume internal server error body
swagger:model InspectVolumeInternalServerErrorBody
*/
type InspectVolumeInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this inspect volume internal server error body
func (o *InspectVolumeInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *InspectVolumeInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InspectVolumeInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res InspectVolumeInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*InspectVolumeNotFoundBody inspect volume not found body
swagger:model InspectVolumeNotFoundBody
*/
type InspectVolumeNotFoundBody struct {

	// API root cause formatted for automated parsing
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this inspect volume not found body
func (o *InspectVolumeNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *InspectVolumeNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InspectVolumeNotFoundBody) UnmarshalBinary(b []byte) error {
	var res InspectVolumeNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*InspectVolumeOKBody inspect volume o k body
swagger:model InspectVolumeOKBody
*/
type InspectVolumeOKBody struct {

	// Anonymous indicates that the volume was created as an anonymous
	// volume for a specific container, and will be be removed when any
	// container using it is removed.
	Anonymous bool `json:"Anonymous,omitempty"`

	// CreatedAt is the date and time the volume was created at. This is not
	// stored for older Libpod volumes; if so, it will be omitted.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"CreatedAt,omitempty"`

	// Driver is the driver used to create the volume.
	// This will be properly implemented in a future version.
	Driver string `json:"Driver,omitempty"`

	// GID is the GID that the volume was created with.
	GID int64 `json:"GID,omitempty"`

	// Labels includes the volume's configured labels, key:value pairs that
	// can be passed during volume creation to provide information for third
	// party tools.
	Labels map[string]string `json:"Labels,omitempty"`

	// Mountpoint is the path on the host where the volume is mounted.
	Mountpoint string `json:"Mountpoint,omitempty"`

	// Name is the name of the volume.
	Name string `json:"Name,omitempty"`

	// Options is a set of options that were used when creating the volume.
	// It is presently not used.
	Options map[string]string `json:"Options,omitempty"`

	// Scope is unused and provided solely for Docker compatibility. It is
	// unconditionally set to "local".
	Scope string `json:"Scope,omitempty"`

	// Status is presently unused and provided only for Docker compatibility.
	// In the future it will be used to return information on the volume's
	// current state.
	Status map[string]string `json:"Status,omitempty"`

	// UID is the UID that the volume was created with.
	UID int64 `json:"UID,omitempty"`
}

// Validate validates this inspect volume o k body
func (o *InspectVolumeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *InspectVolumeOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("inspectVolumeOK"+"."+"CreatedAt", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *InspectVolumeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InspectVolumeOKBody) UnmarshalBinary(b []byte) error {
	var res InspectVolumeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
