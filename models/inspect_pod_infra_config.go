// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InspectPodInfraConfig InspectPodInfraConfig contains the configuration of the pod's infra
// container.
//
// swagger:model InspectPodInfraConfig
type InspectPodInfraConfig struct {

	// DNSOption is a set of DNS options that will be used by the infra
	// container's resolv.conf and shared with the remainder of the pod.
	DNSOption []string `json:"DNSOption"`

	// DNSSearch is a set of DNS search domains that will be used by the
	// infra container's resolv.conf and shared with the remainder of the
	// pod.
	DNSSearch []string `json:"DNSSearch"`

	// DNSServer is a set of DNS Servers that will be used by the infra
	// container's resolv.conf and shared with the remainder of the pod.
	DNSServer []string `json:"DNSServer"`

	// HostAdd adds a number of hosts to the infra container's resolv.conf
	// which will be shared with the rest of the pod.
	HostAdd []string `json:"HostAdd"`

	// HostNetwork is whether the infra container (and thus the whole pod)
	// will use the host's network and not create a network namespace.
	HostNetwork bool `json:"HostNetwork,omitempty"`

	// NoManageHosts indicates that the pod will not manage /etc/hosts and
	// instead each container will handle their own.
	NoManageHosts bool `json:"NoManageHosts,omitempty"`

	// NoManageResolvConf indicates that the pod will not manage resolv.conf
	// and instead each container will handle their own.
	NoManageResolvConf bool `json:"NoManageResolvConf,omitempty"`

	// PortBindings are ports that will be forwarded to the infra container
	// and then shared with the pod.
	PortBindings []*PortMapping `json:"PortBindings"`

	// static IP
	StaticIP IP `json:"StaticIP,omitempty"`

	// static m a c
	StaticMAC HardwareAddr `json:"StaticMAC,omitempty"`
}

// Validate validates this inspect pod infra config
func (m *InspectPodInfraConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePortBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaticIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaticMAC(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InspectPodInfraConfig) validatePortBindings(formats strfmt.Registry) error {

	if swag.IsZero(m.PortBindings) { // not required
		return nil
	}

	for i := 0; i < len(m.PortBindings); i++ {
		if swag.IsZero(m.PortBindings[i]) { // not required
			continue
		}

		if m.PortBindings[i] != nil {
			if err := m.PortBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PortBindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InspectPodInfraConfig) validateStaticIP(formats strfmt.Registry) error {

	if swag.IsZero(m.StaticIP) { // not required
		return nil
	}

	if err := m.StaticIP.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("StaticIP")
		}
		return err
	}

	return nil
}

func (m *InspectPodInfraConfig) validateStaticMAC(formats strfmt.Registry) error {

	if swag.IsZero(m.StaticMAC) { // not required
		return nil
	}

	if err := m.StaticMAC.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("StaticMAC")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InspectPodInfraConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InspectPodInfraConfig) UnmarshalBinary(b []byte) error {
	var res InspectPodInfraConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
